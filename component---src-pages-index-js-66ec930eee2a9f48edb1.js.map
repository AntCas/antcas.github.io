{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Email/index.js"],"names":["Index","edges","data","allMarkdownRemark","createCard","post","isProject","idx","color","frontmatter","postId","topics","map","topic","join","className","key","title","to","path","id","style","background","image","alt","src","routes","LOGO","BLOG_IMAGE","parentId","borderColor","borderGap","borderWidth","transitionTime","date","cardTypeFilter","pathString","node","length","includes","projectPosts","filter","blogPosts","pageQuery","Email","href"],"mappings":"0VAee,SAASA,EAAT,GAA0B,IAC/BC,EAD8B,EAARC,KACPC,kBAAfF,MAEFG,EAAa,SAACC,EAAMC,EAAWC,GAAS,IACpCC,EAAUH,EAAKI,YAAfD,MACFE,EAAM,qBAAwBH,EAE9BI,EAASN,EAAKI,YAAYE,OAAOC,KAAI,SAAAC,GAAK,UAC1CA,KACHC,KAAK,KAER,OACE,yBAAKC,UAAU,cAAcC,IAAKT,GAC9BD,GAAa,wBAAIS,UAAU,aAAd,GAA8BV,EAAKI,YAAYQ,OAC9D,kBAAC,IAAD,CAAMC,GAAIb,EAAKI,YAAYU,MACzB,yBAAKJ,UAAU,oBACbK,GAAKV,EACLW,MAAO,CAAEC,WAAYjB,EAAKI,YAAYD,QACrCH,EAAKI,YAAYc,OAChB,yBAAKR,UAAeT,EAAY,eAAiB,aAC/CkB,IAAG,GAAMnB,EAAKI,YAAYQ,MAC1BQ,KAASnB,EAAYoB,IAAOC,KAAOD,IAAOE,YAAvC,IAAsDvB,EAAKI,YAAYc,QAE5EjB,EAAY,GACV,6BACE,yBAAKS,UAAU,QAAQM,MAAO,CAAEC,WAAYjB,EAAKI,YAAYD,SAC7D,yBAAKO,UAAU,cACb,+BAASV,EAAKI,YAAYQ,SAIlC,kBAAC,IAAD,CACEY,SAAWnB,EACXoB,YAActB,EACduB,UAAY,EACZC,YAAc,EACdC,eAAe,YAGnB3B,GAAa,uBAAGS,UAAU,YAAeV,EAAKI,YAAYyB,KAA7C,MAAuDvB,KAKtEwB,EAAiB,SAAC9B,EAAM+B,GAAgB,IAAD,EACnB/B,EAAKgC,KAAK5B,YAA1BQ,EADmC,EACnCA,MAAOE,EAD4B,EAC5BA,KACf,OACEF,EAAMqB,OAAS,GAAKnB,EAAKoB,SAASH,IAIhCI,EAAevC,EAAMwC,QAAO,SAAApC,GAAI,OAAI8B,EAAe9B,EAAM,iBACpCO,KAAK,WAAiBL,GAAjB,IAASF,EAAT,EAAGgC,KAAH,OAAyBjC,EAAWC,GAAM,EAAME,MAE1EmC,EAAYzC,EAAMwC,QAAO,SAAApC,GAAI,OAAI8B,EAAe9B,EAAM,aACpCO,KAAK,WAAiBL,GAAjB,IAASF,EAAT,EAAGgC,KAAH,OAAyBjC,EAAWC,GAAM,EAAOE,MAE9E,OACE,kBAAC,IAAD,KACE,yBAAKQ,UAAU,cACb,yBAAKA,UAAU,qBACb,+CACA,gEACA,kBAAC,IAAD,OAEF,iDACA,yBAAKA,UAAU,SACX2B,GAEJ,gDACA,yBAAK3B,UAAU,SACXyB,GAEJ,kBAAC,IAAD,MACA,kBAAC,IAAD,QAMD,IAAMG,EAAS,a,kCC/FtB,mCAYeC,IARD,kBACZ,yBAAK7B,UAAU,SACb,uBAAG8B,KAAK,0CAAR,iBACgB,0BAAM9B,UAAU,QAAhB,WADhB","file":"component---src-pages-index-js-66ec930eee2a9f48edb1.js","sourcesContent":["import React from \"react\";\nimport Link from \"gatsby-link\";\nimport DynamicOutlines from 'dynamic-outlines';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../layouts';\n\nimport About from '../components/About';\nimport Email from '../components/Email';\nimport PageBreak from '../components/PageBreak';\n\nimport routes from '../constants/routes';\n\nimport './index.scss';\n\nexport default function Index({ data }) {\n  const { edges } = data.allMarkdownRemark;\n\n  const createCard = (post, isProject, idx) => {\n    const { color } = post.frontmatter; \n    const postId = `blog-post-preview-${idx}`;\n\n    const topics = post.frontmatter.topics.map(topic => (\n      `#${topic}`    \n    )).join(' ')\n\n    return (\n      <div className=\"PostWrapper\" key={idx}>\n        { isProject && <h3 className=\"PostTitle\">{`${post.frontmatter.title}`}</h3> }\n        <Link to={post.frontmatter.path}>\n          <div className=\"blog-post-preview\"\n            id={ postId }\n            style={{ background: post.frontmatter.color }}>\n            {post.frontmatter.image &&\n              <img className={ `${isProject ? \"project-logo\" : \"blog-image\"}` }\n                alt={ `${post.frontmatter.title}` }\n                src={ `${isProject ? routes.LOGO : routes.BLOG_IMAGE }/${post.frontmatter.image}` } />\n            }\n            { isProject ? '' :\n                <div>\n                  <div className=\"shade\" style={{ background: post.frontmatter.color }} />\n                  <div className=\"blog-title\">\n                    <h3>{ `${post.frontmatter.title}` }</h3>\n                  </div>\n                </div>\n            }\n            <DynamicOutlines\n              parentId={ postId }\n              borderColor={ color }\n              borderGap={ 6 }\n              borderWidth={ 4 }\n              transitionTime=\"150ms\" />\n          </div>\n        </Link>\n        { isProject && <p className=\"PostInfo\">{`${post.frontmatter.date} - ${topics}`}</p> }\n      </div>\n    );\n  };\n\n  const cardTypeFilter = (post, pathString) => {\n    const { title, path } = post.node.frontmatter;\n    return (\n      title.length > 0 && path.includes(pathString)\n    );\n  };\n\n  const projectPosts = edges.filter(post => cardTypeFilter(post, '/projects/'))\n                            .map( ({ node: post }, idx) => createCard(post, true, idx));\n\n  const blogPosts = edges.filter(post => cardTypeFilter(post, '/blog/'))\n                         .map( ({ node: post }, idx) => createCard(post, false, idx));\n\n  return (\n    <Layout>\n      <div className=\"index-page\">\n        <div className=\"front-page-header\">\n          <h1>Anthony Castrio</h1>\n          <h2>Product Management & Engineering</h2>\n          <Email />\n        </div>\n        <h2>Latest Blog Posts</h2>\n        <div className=\"posts\">\n          { blogPosts }\n        </div>\n        <h2>Projects + Teams</h2>\n        <div className=\"posts\">\n          { projectPosts }\n        </div>\n        <About />\n        <PageBreak />\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          frontmatter {\n            title\n            date(formatString: \"YYYY\")\n            path\n            image\n            color\n            topics\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react'\n\nimport './index.scss'\n\nconst Email = () => (\n  <div className=\"email\">\n    <a href=\"mailto:anthonycastrio+public@gmail.com\">\n      anthonycastrio<span className=\"hide\">+public</span>@gmail.com\n    </a>\n  </div>\n);\n\nexport default Email;\n"],"sourceRoot":""}